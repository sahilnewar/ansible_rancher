---

- name: Wait until Cluster is ready and not in transitioning state
  uri:
    url: "{{ keepalived_deployment_rancher_api }}/clusters/{{ keepalived_deployment_rancher_cluster_id }}"
    validate_certs: "{{ keepalived_deployment_rancher_api_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ keepalived_deployment_rancher_api_key }}"
  register: clusterstate
  until: clusterstate.json.state == "active" and clusterstate.json.transitioning == "no"
  retries: 30
  delay: 60
  when:
    - keepalived_deployment_on_custom_cluster

- name: Create Namespace for IP Failover objects
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ keepalived_ns }}"

- name: Create Role for privileged PSP for IP Failover
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('file', 'psp:privileged.yml') }}"

- name: Create RoleBinding for privileged PSP for IP Failover
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('file', 'default:psp:privileged.yml') }}"

- name: Get all Rancher projects
  uri:
    url: "{{ keepalived_deployment_rancher_api }}/clusters/{{ keepalived_deployment_rancher_cluster_id }}/projects"
    validate_certs: "{{ keepalived_deployment_rancher_api_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ keepalived_deployment_rancher_api_key }}"
  register: rancherprojects
  when:
    - keepalived_deployment_on_custom_cluster
    - keepalived_ns_to_system_project

- name: Get the Rancher System project ID
  set_fact:
    ranchersystemprojectid: "{{ rancherprojects | json_query(\"json.data[?name == 'System'].id\") }}"
  when:
    - keepalived_deployment_on_custom_cluster
    - keepalived_ns_to_system_project
    - (rancherprojects | length) > 0

- name: Print Rancher System project ID
  debug:
    msg: "{{ ranchersystemprojectid }}"
  when:
    - keepalived_deployment_on_custom_cluster
    - keepalived_ns_to_system_project
    - (ranchersystemprojectid | length) > 0

- name: Move the keepalived namespace to the Rancher System project
  uri:
    url: "{{ keepalived_deployment_rancher_api }}/clusters/{{ keepalived_deployment_rancher_cluster_id }}/namespaces/{{ keepalived_ns }}?action=move"
    validate_certs: "{{ keepalived_deployment_rancher_api_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ keepalived_deployment_rancher_api_key }}"
    body:
      projectId: "{{ ranchersystemprojectid }}"
    body_format: json
    status_code: 200
    method: POST
  when:
    - keepalived_deployment_on_custom_cluster
    - keepalived_ns_to_system_project
    - (ranchersystemprojectid | length) > 0

- name: Set System project to PSP "unrestricted"
  uri:
    url: "{{ keepalived_deployment_rancher_api }}/projects/{{ ranchersystemprojectid | first }}?action=setpodsecuritypolicytemplate"
    validate_certs: "{{ keepalived_deployment_rancher_api_verify_ssl }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ keepalived_deployment_rancher_api_key }}"
    body:
      podSecurityPolicyTemplateId: "{{ keepalived_rancher_system_project_psp }}"
    body_format: json
    status_code: 200
    method: POST
  when:
    - keepalived_deployment_on_custom_cluster
    - keepalived_ns_to_system_project
    - (ranchersystemprojectid | length) > 0

- name: Create ConfigMap with check.py and/or notify.sh for IP Failover
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('file', 'cm-{{ keepalived_setup_env }}-notify.yml') }}"

- name: Create IP Failover DaemonSets for Internal IP
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('template', 'ds_failover.yml.j2') }}"
  with_items:
    - "{{ keepalived_private_failover_ip }}"
  vars:
    nodes: "{{ groups[keepalived_private_node_group_ipv4] }}"
    unicast_peers: "{% for node in nodes %}''{{ hostvars[node]['ansible_' + keepalived_private_failover_track_interface_ip]['ipv4']['address'] }}'',{% endfor %}"
    server_ids: "{% for node in nodes if keepalived_setup_env == 'cloudscale' %}{''{{ hostvars[node]['inventory_hostname'] }}'':''{{ hostvars[node]['cloudscale_vm']['uuid'] }}''},{% endfor %}"
    with_cloud_notify: "{{ 'True' if keepalived_setup_env == 'cloudscale' else 'False' }}"
    node_selector: "{{ keepalived_private_node_selector }}"
    node_toleration: "{{ keepalived_private_node_toleration }}"
    interface: "{{ keepalived_private_failover_track_interface_ip }}"
    track_interface: "{{ keepalived_private_failover_track_interface_ip }}"

- name: Create IP Failover DaemonSets for Public IP
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('template', 'ds_failover.yml.j2') }}"
  with_items:
    - "{{ keepalived_public_failover_ip }}"
  vars:
    nodes: "{{ groups[keepalived_public_node_group_ipv4] }}"
    unicast_peers: "{% for node in nodes %}''{{ hostvars[node]['ansible_' + keepalived_public_failover_track_interface_ip]['ipv4']['address'] }}'',{% endfor %}"
    server_ids: "{% for node in nodes if keepalived_setup_env == 'cloudscale' %}{''{{ hostvars[node]['inventory_hostname'] }}'':''{{ hostvars[node]['cloudscale_vm']['uuid'] }}''},{% endfor %}"
    with_cloud_notify: "{{ 'True' if keepalived_setup_env == 'cloudscale' else 'False' }}"
    node_selector: "{{ keepalived_public_node_selector }}"
    node_toleration: "{{ keepalived_public_node_toleration }}"
    interface: "{{ keepalived_public_failover_track_interface_ip }}"
    track_interface: "{{ keepalived_public_failover_track_interface_ip }}"
  when:
    - not keepalived_private_only

- name: Create IP Failover DaemonSets for Public IPv6
  k8s:
    kubeconfig: "{{ kubeconfigfile }}"
    state: present
    definition: "{{ lookup('template', 'ds_failover.yml.j2') }}"
  with_items:
    - "{{ keepalived_public_failover_ipv6 }}"
  vars:
    nodes: "{{ groups[keepalived_public_node_group_ipv6] }}"
    unicast_peers: "{% for node in nodes %}''{{ hostvars[node]['ansible_default_ipv6']['address'] }}'',{% endfor %}"
    server_ids: "{% for node in nodes if keepalived_setup_env == 'cloudscale' %}{''{{ hostvars[node]['inventory_hostname'] }}'':''{{ hostvars[node]['cloudscale_vm']['uuid'] }}''},{% endfor %}"
    with_cloud_notify: "{{ 'True' if keepalived_setup_env == 'cloudscale' else 'False' }}"
    node_selector: "{{ keepalived_public_node_selector }}"
    node_toleration: "{{ keepalived_public_node_toleration }}"
    interface: "{{ keepalived_public_failover_track_interface_ipv6 }}"
    track_interface: "{{ keepalived_public_failover_track_interface_ipv6 }}"
  when:
    - not keepalived_private_only
    - not keepalived_ipv4_only