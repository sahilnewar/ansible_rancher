apiVersion: v1
data:
  check.py: |-
    #!/usr/bin/env python

    import requests
    import os
    import sys
    import subprocess

    cloudscale_api = "https://api.cloudscale.ch/"
    cloudscale_api_token = os.environ['API_TOKEN']

    hostname = os.environ['HOSTNAME'].split(".")[0]
    vips = eval(os.environ['KEEPALIVED_VIRTUAL_IPS'].replace("#PYTHON2BASH:",""))

    def findMySelf():

        try:
            response = requests.get("{}/v1/servers".format(cloudscale_api), headers={'Authorization': "Bearer {}".format(cloudscale_api_token)})
            response.raise_for_status()
            servers = response.json()
        except requests.ConnectionError as e:
            return None
        except requests.HTTPError as e:
            return None

        me = None

        if "detail" in servers:
            # There was an error
            return None

        for server in servers:
            if server["name"] == hostname:
                me = server
                break;

        return me

    def getFoatingIP(ip):

        try:
            response = requests.get("{}/v1/floating-ips/{}".format(cloudscale_api,ip), headers={'Authorization': "Bearer {}".format(cloudscale_api_token)})
            response.raise_for_status()
            floating_ip = response.json()
        except requests.ConnectionError as e:
            return None
        except requests.HTTPError as e:
            return None

        if "detail" in floating_ip:
            # There was an error
            return None

        return floating_ip

    def main():

        me = findMySelf()

        if me is None:
            # API seems wrong, exit 0 to not cause a ip failover
            sys.exit(0)

        for vip in vips:
            floating_ip = getFoatingIP(vip)

            if floating_ip is None:
                # API seems wrong, exit 0 to not cause a ip failover
                sys.exit(0)


            result = subprocess.Popen("/sbin/ip a show dev eth0 | /bin/grep {}".format(vip), shell=True, stdout=subprocess.PIPE)
            text = result.communicate()[0]

            is_active = result.returncode == 0

            if is_active:
                # I'm active, so I should have the floating
                if floating_ip["server"]["uuid"] == me["uuid"]:
                    print("Interface has IP {} and assigend correct".format(vip))
                    sys.exit(0)
                else:
                    print("Interface has IP {} and not assigend correct".format(vip))
                    sys.exit(1)
            else:
                # I'm not active, so I should not have the floating
                if floating_ip["server"]["uuid"] == me["uuid"]:
                    print("Interface don't have IP {} and not assigend correct".format(vip))
                    sys.exit(1)
                else:
                    print("Interface don't have IP {} and assigend correct".format(vip))
                    sys.exit(0)

    if __name__== "__main__":
        main()
  notify.sh: "#!/bin/bash\n\n# for ANY state transition.\n# \"notify\" script is called
    AFTER the\n# notify_* script(s) and is executed\n# with 3 arguments provided by
    keepalived\n# (ie don't include parameters in the notify line).\n# arguments\n#
    $1 = \"GROUP\"|\"INSTANCE\"\n# $2 = name of group or instance\n# $3 = target state
    of transition\n#     (\"MASTER\"|\"BACKUP\"|\"FAULT\")\n\nTYPE=$1\nNAME=$2\nSTATE=$3\n\nSERVERNAME=\"$(hostname)\"\n\nfor
    info in $(complex-bash-env iterate SERVER_IDS)\ndo\n\n        if [ $(complex-bash-env
    isRow \"${!info}\") = true ]; then\n\n                key=$(complex-bash-env getRowKeyVarName
    \"${!info}\")\n                value=$(complex-bash-env getRowValueVarName \"${!info}\")\n\n\t\t
    \           currentserver=${!key}\n                if [ \"$currentserver\" ==
    \"$SERVERNAME\" ]; then\n                        SERVER_ID=${!value}\n                fi\n\n
    \       fi\ndone\n\necho \"I'm $SERVERNAME, with ID: $SERVER_ID\" > /proc/1/fd/1\n\ncase
    $STATE in\n        \"MASTER\") echo \"I'm the MASTER! Whup whup.\" > /proc/1/fd/1\n
    \                 sleep 1\n                  for vip in $(complex-bash-env iterate
    KEEPALIVED_VIRTUAL_IPS)\n                  do\n                    VIRTUAL_IP=${!vip}\n
    \                   ip a show dev eth0 | grep ${VIRTUAL_IP}\n                    if
    [ $? -eq 0 ]; then\n                        echo \"Update $SERVER_ID with IP ${VIRTUAL_IP}\"
    > /proc/1/fd/1\n                        curl -H \"Authorization: Bearer $API_TOKEN\"
    -F server=$SERVER_ID https://api.cloudscale.ch/v1/floating-ips/{$VIRTUAL_IP} >
    /proc/1/fd/1\n                    else\n                        echo \"not updating
    because IP ${VIRTUAL_IP} not assigned to eth0\" > /proc/1/fd/1\n                    fi\n
    \                 done\n\n                  exit 0\n                  ;;\n        \"BACKUP\")
    echo \"Ok, i'm just a backup, great.\" > /proc/1/fd/1\n                  exit
    0\n                  ;;\n        \"FAULT\")  echo \"Fault, what ?\" > /proc/1/fd/1\n
    \                 exit 0\n                  ;;\n        *)        echo \"Unknown
    state\" > /proc/1/fd/1\n                  exit 1\n                  ;;\nesac"
kind: ConfigMap
metadata:
  name: keepalived-failover
  namespace: ipfailover
